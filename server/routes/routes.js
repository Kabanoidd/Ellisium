const express = require("express");
const bcrypt = require("bcryptjs");
const User = require("../models/User");
const Block = require("../models/Block");
const nodemailer = require("nodemailer");
const multer = require("multer");
const path = require("path");
const router = express.Router();
const Project = require("../models/Project");  // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
const fs = require("fs");
const unzipper = require("unzipper");

// –û–±—ä—è–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
const pendingRegistrations = {};
const pendingEmailChanges = {};
const pendingPasswordChanges = {};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "hshxhsyhs@gmail.com", // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email
    pass: "mihr qnfw rpbx zqxl", // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  },
});

const generateCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

const sendConfirmationEmail = async (email, code) => {
  const mailOptions = {
    from: "hshxhsyhs@gmail.com", // –∏–ª–∏ –≤–∞—à email, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    to: email, // –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ —Ç—É –ø–æ—á—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    subject: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
    text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`, // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email:", email);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", error);
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/"); // –ü–∞–ø–∫–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
  },
  filename: (req, file, cb) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
    const uniqueName = Date.now() + "-" + file.originalname;
    cb(null, uniqueName);
  },
});
const upload = multer({ storage });


router.post("/register", async (req, res) => {
  const { name, email, phone, password } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    const existingUser = await User.findOne({ $or: [{ email }, { phone }] });
    if (existingUser) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const confirmationCode = generateCode();
    const confirmationCodeExpires = new Date(Date.now() + 10 * 60 * 1000);

    // –ó–∞—Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    pendingRegistrations[email] = {
      name,
      email,
      phone,
      password: hashedPassword,
      confirmationCode,
      confirmationCodeExpires,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email
    await sendConfirmationEmail(email, confirmationCode);

    res.status(201).json({ message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }
});

router.post("/verify-code", async (req, res) => {
  const { email, code } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ email
    const pendingData = pendingRegistrations[email];
    if (!pendingData) {
      return res.status(400).json({ message: "–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ email" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    if (pendingData.confirmationCode !== code) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
    }

    if (pendingData.confirmationCodeExpires < new Date()) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      delete pendingRegistrations[email];
      return res.status(400).json({ message: "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫" });
    }

    // –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    const newUser = new User({
      name: pendingData.name,
      email: pendingData.email,
      phone: pendingData.phone,
      password: pendingData.password,
      role: pendingData.email === "hshxhsyhs@gmail.com" ? "admin" : "user",
    });
    await newUser.save();

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    delete pendingRegistrations[email];

    res.status(200).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞" });
  }
});

// üìå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏, –≤–∫–ª—é—á–∞—è —Ä–æ–ª—å
    req.session.user = {
      id: user._id,
      name: user.name,
      role: user.role, // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é
      email: user.email,
      status_sub: user.status_sub,
    };

    res.json({ message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
router.get("/me", (req, res) => {
  if (req.session.user) {
    res.json({ user: req.session.user });
  } else {
    res.status(401).json({ message: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏" });
  }
});

// üìå –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
router.post("/logout", (req, res) => {
  req.session.destroy(() => {
    res.clearCookie("connect.sid");
    res.json({ message: "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" });
  });
});

router.post("/change-email", async (req, res) => {
  const { userId, newEmail } = req.body;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const user = await User.findById(userId);
    if (!user) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const confirmationCode = generateCode();
    const confirmationCodeExpires = new Date(Date.now() + 10 * 60 * 1000);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—á—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    pendingEmailChanges[user.email] = {
      userId,
      newEmail,
      confirmationCode,
      confirmationCodeExpires,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ä—ã–π email
    await sendConfirmationEmail(user.email, confirmationCode);

    res.status(201).json({ message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —Å—Ç–∞—Ä—ã–π email" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email" });
  }
});

router.post("/verify-code", async (req, res) => {
  const { email, code } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ email
    const pendingData = pendingRegistrations[email];
    if (!pendingData) {
      return res.status(400).json({ message: "–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ email" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    if (pendingData.confirmationCode !== code) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
    }

    if (pendingData.confirmationCodeExpires < new Date()) {
      delete pendingRegistrations[email];
      return res.status(400).json({ message: "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫" });
    }

    // –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é admin –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ email
    const newUser = new User({
      name: pendingData.name,
      email: pendingData.email,
      phone: pendingData.phone,
      password: pendingData.password,
      role: pendingData.email === "hshxhsyhs@gmail.com" ? "admin" : "user",
    });
    await newUser.save();

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    delete pendingRegistrations[email];

    res.status(200).json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞" });
  }
});

router.post("/change-password", async (req, res) => {
  const { userId, currentPassword, newPassword } = req.body;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    const user = await User.findById(userId);
    if (!user) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const confirmationCode = generateCode();
    const confirmationCodeExpires = new Date(Date.now() + 10 * 60 * 1000);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    pendingPasswordChanges[user.email] = {
      userId,
      newPassword,
      confirmationCode,
      confirmationCodeExpires,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email
    await sendConfirmationEmail(user.email, confirmationCode);

    res.status(201).json({ message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è" });
  }
});

router.post("/verify-password-change", async (req, res) => {
  const { email, code } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ email
    const pendingData = pendingPasswordChanges[email];
    if (!pendingData) {
      return res.status(400).json({ message: "–ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ email" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
    if (pendingData.confirmationCode !== code) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" });
    }

    if (pendingData.confirmationCodeExpires < new Date()) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      delete pendingPasswordChanges[email];
      return res.status(400).json({ message: "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫" });
    }

    // –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
    const user = await User.findById(pendingData.userId);
    if (!user) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    user.password = await bcrypt.hash(pendingData.newPassword, 10);
    await user.save();

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    delete pendingPasswordChanges[email];

    res.status(200).json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞" });
  }
});

router.post("/change-name", async (req, res) => {
  const { userId, newName } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    const existingUser = await User.findOne({ name: newName });
    if (existingUser) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
    const user = await User.findById(userId);
    if (!user) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    user.name = newName;
    await user.save();

    res.status(200).json({ message: "–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏" });
  }
});

router.post("/upload-profile-picture", upload.single("profilePicture"), async (req, res) => {
  const { userId } = req.body;
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, —á—Ç–æ–±—ã img src="/uploads/..." —Ä–∞–±–æ—Ç–∞–ª–æ
  const relativePath = "/uploads/" + req.file.filename;

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    user.profilePicture = relativePath;
    await user.save();

    // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–µ—Å—Å–∏–∏, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å req.session.user.profilePicture
    if (req.session?.user) {
      req.session.user.profilePicture = relativePath;
    }

    res.status(200).json({
      message: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
      profilePicture: relativePath,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è" });
  }
});


router.get("/check-session", (req, res) => {
  console.log("–°–µ—Å—Å–∏—è:", req.session);
  if (req.session.user) {
    res.json({ user: req.session.user });
  } else {
    res.status(401).json({ message: "–°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
  }
});

router.post("/save-block", upload.fields([
  { name: "archive", maxCount: 1 },
  { name: "preview", maxCount: 1 }
]), async (req, res) => {
  try {
    if (!req.session.user) {
      return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }

    console.log("req.files:", req.files);

    const { name, structure, styles, script, keywords } = req.body;
    const parsedStructure = typeof structure === "string" ? JSON.parse(structure) : structure;
    const parsedStyles = typeof styles === "string" ? JSON.parse(styles) : styles;
    const parsedKeywords = typeof keywords === "string" ? JSON.parse(keywords) : keywords;

    if (!req.files || !req.files.preview || req.files.preview.length === 0) {
      return res.status(400).json({ message: "–§–æ—Ç–æ-–ø—Ä–µ–≤—å—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }
    const previewFile = req.files.preview[0];

    let images = [];
    if (req.files.archive && req.files.archive.length > 0) {
      const archivePath = req.files.archive[0].path;
      const archiveBuffer = fs.readFileSync(archivePath); // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
      const directory = await unzipper.Open.buffer(archiveBuffer);

      for (const fileEntry of directory.files) {
        if (!fileEntry.path.endsWith("/")) {
          const fileBuffer = await fileEntry.buffer();
          images.push({
            data: fileBuffer,
            contentType: "image/jpeg",
          });
        }
      }
    }

    const newBlock = new Block({
      name,
      structure: parsedStructure,
      styles: parsedStyles,
      script,
      userId: req.session.user.id,
      username: req.session.user.name,
      preview: {
        data: fs.readFileSync(previewFile.path),
        contentType: previewFile.mimetype,
      },
      images,
      keywords: parsedKeywords,
    });

    const savedBlock = await newBlock.save();
    res.json({ message: "–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", block: savedBlock });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.get("/blocks", async (req, res) => {
  try {
    const blocks = await Block.find();
    res.json(blocks); // –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –±–ª–æ–∫–æ–≤
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/projects", async (req, res) => {
  try {
    const { userId, userName, projectName, blocks } = req.body;

    if (!projectName) {
      return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }

    const newProject = new Project({
      name: projectName,
      userId,
      userName,
      blocks,
    });

    await newProject.save();
    res.status(201).json({ message: "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", project: newProject });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.get("/projects/:userId", async (req, res) => {
  try {
    const projects = await Project.find({ userId: req.params.userId });
    res.json(projects);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.put("/projects/:id", async (req, res) => {
  try {
    const { projectName, blocks } = req.body;
    if (!projectName) {
      return res.status(400).json({ error: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }
    
    const updatedProject = await Project.findByIdAndUpdate(
      req.params.id,
      { name: projectName, blocks },
      { new: true, runValidators: true }
    );
    
    if (!updatedProject) {
      return res.status(404).json({ error: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    
    res.json({ message: "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", project: updatedProject });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.get("/project/:id", async (req, res) => {
  try {
    const project = await Project.findById(req.params.id);
    if (!project) {
      return res.status(404).json({ error: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json(project);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.delete("/projects/:id", async (req, res) => {
  try {
    const deletedProject = await Project.findByIdAndDelete(req.params.id);
    if (!deletedProject) {
      return res.status(404).json({ error: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ (DELETE /api/blocks/:id)
router.delete("/blocks/:id", async (req, res) => {
  try {
    const deletedBlock = await Block.findByIdAndDelete(req.params.id);
    if (!deletedBlock) {
      return res.status(404).json({ error: "–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "–ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.put("/blocks/:id/publish", async (req, res) => {
  try {
    const blockId = req.params.id;
    console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –±–ª–æ–∫–∞ —Å ID:", blockId);

    const updatedBlock = await Block.findByIdAndUpdate(
      blockId,
      { published: true },
      { new: true, runValidators: true }
    );

    if (!updatedBlock) {
      console.log("–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      return res.status(404).json({ error: "–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    console.log("–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω:", updatedBlock);
    res.json({ message: "–ë–ª–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω", block: updatedBlock });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–ª–æ–∫–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ (GET /api/published-blocks)
router.get("/published-blocks", async (req, res) => {
  try {
    const blocks = await Block.find({ published: true });
    res.json(blocks);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

router.post("/add-block-to-collection", async (req, res) => {
  try {
    if (!req.session.user) {
      return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }
    const { blockId } = req.body;
    const userId = req.session.user.id;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ–±–∞–≤–ª—è–µ–º blockId –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $addToSet: { collection: blockId } },
      { new: true }
    );
    if (!updatedUser) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({ message: "–ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é", user: updatedUser });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;
